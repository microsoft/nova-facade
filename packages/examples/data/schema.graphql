interface Node {
  id: ID!
}

type Mutation {
  feedbackLike(input: FeedbackLikeInput!): FeedbackLikeMutationResult!
}
type Query {
  feedback(id: ID!): Feedback!
  serverField: String!
  node(id: ID!): Node
  serverObjectWithClientExtension: ServerObjectWithClientExtension!
  viewer: Viewer!
}

type Viewer {
  id: ID!
}

type FeedbackLikeMutationResult {
  feedback: Feedback!
}

type Feedback implements Node {
  id: ID!
  message: Message!
  doesViewerLike: Boolean!
}

type Message {
  text: String!
}

input FeedbackLikeInput {
  feedbackId: ID!
  doesViewerLike: Boolean!
}

type ServerObjectWithClientExtension {
  serverField: String!
}
