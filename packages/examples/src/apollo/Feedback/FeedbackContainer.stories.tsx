import type { Meta, StoryObj } from "@storybook/react";
import {
  userEvent,
  within,
  waitFor,
  expect,
  fn,
  screen,
} from "@storybook/test";
import {
  type UnknownOperation,
  type WithNovaEnvironment,
  getNovaDecorator,
  MockPayloadGenerator,
  getNovaEnvironmentForStory,
  EventingInterceptor,
} from "@nova/react-test-utils/apollo";
import type { TypeMap } from "../../__generated__/schema.all.interface";
import { FeedbackContainer } from "./FeedbackContainer";
import { cacheConfig } from "../../testing-utils/apolloCacheConfig";
import type { events, FeedbackTelemetryEvent } from "../../events/events";
import * as React from "react";
import { schema } from "../../testing-utils/schema";
import { defaultNodeResolver } from "../../testing-utils/resolvers";

const telemetryEventMock =
  fn<[{ event: FeedbackTelemetryEvent; source: unknown }]>();

type NovaParams = WithNovaEnvironment<
  UnknownOperation,
  TypeMap,
  typeof FeedbackContainer
>;

const meta = {
  component: FeedbackContainer,
  decorators: [getNovaDecorator(schema, { cache: cacheConfig })],
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => ({
          id: "feedback:42",
        }),
        Node: defaultNodeResolver,
      },
    },
  } satisfies NovaParams,
  render: () => (
    <EventingInterceptor<typeof events>
      eventMap={{
        feedbackTelemetry: telemetryEventMock,
      }}
    >
      <FeedbackContainer />
    </EventingInterceptor>
  ),
} satisfies Meta<typeof FeedbackContainer>;

export default meta;
type Story = StoryObj<typeof meta>;

export const AutoGeneratedDataOnly: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = await canvas.findByRole("button", { name: "Like" });
    await expect(button).toBeInTheDocument();
  },
};

export const Primary: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => sampleFeedback,
      },
    },
  } satisfies NovaParams,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = await canvas.findByRole("button", { name: "Like" });
    await expect(button).toBeInTheDocument();
  },
};

export const Liked: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => ({
          ...sampleFeedback,
          doesViewerLike: true,
        }),
      },
    },
  } satisfies NovaParams,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = await canvas.findByRole("button", { name: "Unlike" });
    await expect(button).toBeInTheDocument();
  },
};

export const Like: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => sampleFeedback,
        FeedbackLikeMutationResult: () => ({
          feedback: {
            ...sampleFeedback,
            doesViewerLike: true,
          },
        }),
      },
    },
  } satisfies NovaParams,
  play: async ({ canvasElement }) => {
    const container = within(canvasElement);
    const likeButton = await container.findByRole("button", { name: "Like" });
    userEvent.click(likeButton);

    await container.findByRole("button", { name: "Unlike" });

    let feedbackOperationEvents: [
      { event: FeedbackTelemetryEvent; source: unknown },
    ][] = [];
    await waitFor(() => {
      feedbackOperationEvents = telemetryEventMock.mock.calls.filter(
        ([{ event }]) => {
          const operation = event.data().operation;
          return (
            operation === "FeedbackLiked" || operation === "FeedbackUnliked"
          );
        },
      );
      expect(feedbackOperationEvents).toHaveLength(1);
    });

    const call = feedbackOperationEvents[0];
    expect(call[0].event.data().operation).toBe("FeedbackLiked");
  },
};

export const LikeFailure: Story = {
  parameters: {
    novaEnvironment: {
      enableQueuedMockResolvers: false,
    },
  } satisfies NovaParams,
  play: async (context) => {
    const {
      graphql: { mock },
    } = getNovaEnvironmentForStory(context);

    const container = within(context.canvasElement);
    await waitFor(async () => {
      const operation = mock.getMostRecentOperation();
      await expect(operation).toBeDefined();
    });
    await mock.resolveMostRecentOperation((operation) =>
      MockPayloadGenerator.generate(operation, {
        Feedback: () => sampleFeedback,
      }),
    );
    const likeButton = await container.findByRole("button", { name: "Like" });
    userEvent.click(likeButton);
    await waitFor(async () => {
      const operation = mock.getMostRecentOperation();
      expect(operation).toBeDefined();
    });
    mock.rejectMostRecentOperation(new Error("Like failed"));

    await container.findByText("Something went wrong");
  },
};

export const QueryFailure: Story = {
  parameters: {
    novaEnvironment: {
      enableQueuedMockResolvers: false,
    },
  } satisfies NovaParams,
  play: async (context) => {
    const {
      graphql: { mock },
    } = getNovaEnvironmentForStory(context);
    await waitFor(async () => {
      const operation = mock.getMostRecentOperation();
      await expect(operation).toBeDefined();
    });
    await mock.rejectMostRecentOperation(new Error("Query failed"));

    await screen.findByText("Error: Query failed");
  },
};

export const Loading: Story = {
  parameters: {
    novaEnvironment: {
      enableQueuedMockResolvers: false,
    },
  } satisfies NovaParams,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loadingElement = await canvas.findByText("Loading...");
    await expect(loadingElement).toBeInTheDocument();
  },
};

const sampleFeedback = {
  id: "feedback:42",
  message: {
    text: "Feedback title",
  },
  doesViewerLike: false,
};
