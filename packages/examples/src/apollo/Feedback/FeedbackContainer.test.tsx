import { composeStories } from "@storybook/react";
import * as stories from "./FeedbackContainer.stories";
import { render, screen, waitFor } from "@testing-library/react";
import * as React from "react";
import "@testing-library/jest-dom";
import { prepareStoryContextForTest } from "@nova/react-test-utils/apollo";
import { executePlayFunction } from "../../testing-utils/executePlayFunction";

const { AutoGeneratedDataOnly, Primary, Liked, Like, LikeFailure, Loading } =
  composeStories(stories);

describe("FeedbackContainer", () => {
  it("should render when no parameters are provided", async () => {
    render(<AutoGeneratedDataOnly />);
    const button = await screen.findByRole("button", { name: "Like" });
    expect(button).toBeInTheDocument();
  });

  it("should show like button", async () => {
    render(<Primary />);
    const button = await screen.findByRole("button", { name: "Like" });
    expect(button).toBeInTheDocument();
  });

  it("should show unlike button", async () => {
    render(<Liked />);
    const button = await screen.findByRole("button", { name: "Unlike" });
    expect(button).toBeInTheDocument();
  });

  it("should show unlike button after clicking like button", async () => {
    const { container } = render(<Like />);
    await executePlayFunction(Like, { canvasElement: container });
    const button = await screen.findByRole("button", { name: "Unlike" });
    expect(button).toBeInTheDocument();
  });

  it("should show an error if the like button fails", async () => {
    const { container } = render(<LikeFailure />);
    await executePlayFunction(
      LikeFailure,
      prepareStoryContextForTest(LikeFailure, container),
    );
    const error = await screen.findByText("Something went wrong");
    expect(error).toBeInTheDocument();
  });

  it("should show loading state", async () => {
    render(<Loading />);
    const loading = await screen.findByText("Loading...");
    expect(loading).toBeInTheDocument();
  });

  it("should correctly propagate parameters even when multiple stories with same resolvers are rendered", async () => {
    render(<Primary />);
    render(<Liked />);
    render(<Primary />);
    const text = "Feedback: Feedback title";
    await waitFor(
      () => {
        const texts = screen.getAllByText(text);
        expect(texts).toHaveLength(3);
      },
      { timeout: 3000 },
    );
    expect(screen.getAllByText(text)[2]).toBeInTheDocument();
  });
});
