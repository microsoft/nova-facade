import { graphql } from "@nova/react";
import {
  getNovaEnvironmentForStory,
  getNovaRelayDecorator,
  type WithNovaEnvironment,
} from "@nova/react-test-utils";
import type { Meta, StoryObj } from "@storybook/react";
import { userEvent, within } from "@storybook/test";
import type { TypeMap } from "../../__generated__/schema.all.interface";
import { FeedbackComponent } from "./Feedback";
import type { FeedbackStoryQuery } from "./__generated__/FeedbackStoryQuery.graphql";
import { getSchema } from "../../testing-utils/getSchema";

const schema = getSchema();

const meta: Meta<typeof FeedbackComponent> = {
  component: FeedbackComponent,
  decorators: [getNovaRelayDecorator(schema)],
  parameters: {
    novaEnvironment: {
      query: graphql`
        query FeedbackStoryQuery($id: ID!) @relay_test_operation {
          feedback(id: $id) {
            id
            message {
              text
            }
            doesViewerLike
            ...Feedback_feedbackFragment
          }
        }
      `,
      getReferenceEntry: (data) => ["feedback", data?.feedback],
    },
  } satisfies WithNovaEnvironment<FeedbackStoryQuery, TypeMap>,
};

export default meta;
type Story = StoryObj<typeof meta>;

export const AutoGeneratedDataOnly: Story = {};

export const Primary: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => sampleFeedback,
      },
    },
  } satisfies WithNovaEnvironment<FeedbackStoryQuery, TypeMap>,
};

export const Liked: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => ({
          ...sampleFeedback,
          doesViewerLike: true,
        }),
      },
    },
  } satisfies WithNovaEnvironment<FeedbackStoryQuery, TypeMap>,
};

export const Like: Story = {
  parameters: {
    novaEnvironment: {
      resolvers: {
        Feedback: () => sampleFeedback,
        FeedbackLikeMutationResult: () => ({
          feedback: {
            ...sampleFeedback,
            doesViewerLike: true,
          },
        }),
      },
    },
  } satisfies WithNovaEnvironment<FeedbackStoryQuery, TypeMap>,
  play: async (context) => {
    const container = within(context.canvasElement);
    const likeButton = await container.findByRole("button", { name: "Like" });
    await userEvent.click(likeButton);

    const env = getNovaEnvironmentForStory(context);
    env.graphql.mock.resolveMostRecentOperation(() => {
      return {
        data: {
          feedbackLike: {
            feedback: {
              id: sampleFeedback.id,
              doesViewerLike: true,
            },
          },
        },
      };
    });
  },
};

const sampleFeedback = {
  id: "42",
  message: {
    text: "Feedback title",
  },
  doesViewerLike: false,
};
